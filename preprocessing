import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig
from section_cutting import *
from os import listdir

def figure_maker(data, FolderSTFTTraining, FolderSTFTTesting, FileName):
    time = data[75:len(data)-1, 1]
    voltage = data[75:len(data)-1, 2]
    Fs = 4000

    detenV = sig.detrend(voltage)

    filter = sig.butter(2, [95, 1500], 'bandpass', fs=4000, output='sos')
    corrVoltage = sig.sosfilt(filter, detenV)
    corrVoltage = (corrVoltage*5)/1023
    TrainingDirectory = [f for f in listdir(FolderSTFTTraining)]
    TestDirectory = [f for f in listdir(FolderSTFTTesting)]
    # if len(TrainingDirectory)==0:
    #     last_file_Training = 0
    # else:
    #     last_file_Training = int(TrainingDirectory[len(TrainingDirectory) - 1])
    #
    # if len(TestDirectory)==0:
    #     last_file_Testing = 0
    # else:
    #     last_file_Testing = int(TestDirectory[len(TestDirectory) - 1])

    countTrain = int(len(TrainingDirectory))
    countTest = int(len(TestDirectory))
    maxV = max(corrVoltage)
    normV = corrVoltage/maxV
    seperationPoints = SectionCutting(normV, time, FileName)

    N = len(seperationPoints)
    Arr = np.arange(N)
    np.random.shuffle(Arr)
    Training = Arr[:round(N*0.8)]

    for i in range(1,N-1):
        Vshow = normV[seperationPoints[i]:seperationPoints[i+1]]

        fig0 = plt.figure()
        ax0 = plt.Axes(fig0, [0., 0., 1., 1.])
        plt.style.use('dark_background')
        plt.scatter(time[seperationPoints[i]:seperationPoints[i+1]], Vshow, c=abs(Vshow*Vshow), s=abs(Vshow))
        plt.gray()
        plt.axis('off')
        ax0.set_axis_off()
        plt.tight_layout()
        plt.show()
        fig0.savefig('ScattTestingFigure.png', bbox_inches='tight', pad_inches=0)

        f1, t1, Zxx1 = sig.stft(Vshow, Fs, nperseg=1000)
        fig1 = plt.figure(frameon=False)
        ax1 = plt.Axes(fig1, [0., 0., 1., 1.])
        plt.pcolormesh(t1, f1, np.abs(Zxx1), shading='gouraud', cmap='gray')
        plt.axis('off')
        plt.ylim([90, 500])
        ax1.set_axis_off()
        plt.tight_layout()
        plt.show()
        fig1.savefig('STFTTestingFigure.png', bbox_inches='tight', pad_inches=0)

        #from Image_merge import merge_images
        import os

        # if i in Training:
        #     nameTrain = str(countTrain)
        #     countTrain += 1
        #     FileName = FolderSTFTTraining + "/" +nameTrain
        #     #fig1.savefig(FileName, bbox_inches='tight', pad_inches=0)
        #     #merge_images('Ch1.png', nameTrain, FolderSTFTTraining)
        #     merge_images('STFTTestingFigure.png', 'ScattTestingFigure.png', 'ScattTestingFigure.png',
        #                  'STFTTestingFigure.png', nameTrain, FolderSTFTTraining )
        # else:
        #     nameTest = str(countTest)
        #     countTest += 1
        #     FileName =  FolderSTFTTesting + "/" + nameTest
        #     #fig1.savefig(FileName, bbox_inches='tight', pad_inches=0)
        #     #('Ch1.png', nameTest, FolderSTFTTesting)
        #     merge_images('STFTTestingFigure.png', 'ScattTestingFigure.png', 'ScattTestingFigure.png',
        #                  'STFTTestingFigure.png', nameTest, FolderSTFTTesting)

        from PIL import Image
        def ProcessIm(Im1, Im2, fileName):
            image1 = Image.open(Im1)
            image1 = image1.rotate(90)

            image2 = Image.open(Im2)
            image1_size = image1.size
            new_image = Image.new('RGB', (2 * image1_size[0], image1_size[1]), (250, 250, 250))
            new_image.paste(image1, (0, 0))
            new_image.paste(image2, (image1_size[0], 0))
            new_image.save(fileName)

        if i in Training:
            nameTrain = str(countTrain)
            countTrain += 1
            FileName = FolderSTFTTraining + "/" + nameTrain + '.png'
            print(FileName)
            ProcessIm('STFTTestingFigure.png', 'ScattTestingFigure.png', FileName)

        else:
            nameTest = str(countTest)
            countTest += 1
            FileName = FolderSTFTTesting + "/" + nameTest + '.png'
            print(FileName)
            ProcessIm('STFTTestingFigure.png', 'ScattTestingFigure.png', FileName)

        os.remove("STFTTestingFigure.png")
        os.remove("ScattTestingFigure.png")


import os
from os.path import isdir
def Classifier(x):
    # classification = ""
    # for i in x:
    #     if str.isdigit(i):
    #         classification = classification + i
    classification = x

    FolderSTFTTraining = "Figure/Training/"+ classification
    FolderSTFTTesting = "Figure/Testing/"+ classification

    if isdir(FolderSTFTTraining):
        print("Folders Already Excits!")
    else:
        os.mkdir(FolderSTFTTraining)
        os.mkdir(FolderSTFTTesting)
    print("Folder for", classification, "made!")
    return [FolderSTFTTraining, FolderSTFTTesting]


def TestingPreprocessing(Voltage, Time):
    time = Time[0:len(Time)-4000]
    voltage = Voltage[0:len(Voltage)-4000]
    Fs = 4000

    detenV = sig.detrend(voltage)

    filter = sig.butter(2, [95, 1500], 'bandpass', fs=4000, output='sos')
    corrVoltage = sig.sosfilt(filter, detenV)
    corrVoltage = (corrVoltage*5)/1023

    maxV = max(corrVoltage)
    normV = corrVoltage/maxV

    #seperationPoints = SectionCuttingTesting(normV, time)

    # N = len(seperationPoints)
    # if N == 1:
    #     print(len(normV))
    #     print(normV)
    #     plt.plot(Time[0:seperationPoints[0]], normV[0:seperationPoints[0]])
    #     plt.show()
    #
    #     f1, t1, Zxx1 = sig.stft(normV[0:seperationPoints[0]], Fs, nperseg=1000)
    #
    #     fig1 = plt.figure(frameon=False)
    #     ax1 = plt.Axes(fig1, [0., 0., 1., 1.])
    #     plt.pcolormesh(t1, f1, np.abs(Zxx1), shading='gouraud', cmap='gray')
    #     plt.axis('off')
    #     plt.ylim([90, 500])
    #     ax1.set_axis_off()
    #     plt.tight_layout()
    #     fig1.savefig('TestingFigure.png', bbox_inches='tight', pad_inches=0)
    #
    # else:
    #     print(len(normV))
    #     print(normV)
    #     plt.plot(Time[seperationPoints[0]:seperationPoints[1]],normV[seperationPoints[0]:seperationPoints[1]])
    #     plt.show()
    #
    #
    #     f1, t1, Zxx1 = sig.stft(normV[seperationPoints[0]:seperationPoints[1]], Fs, nperseg=1000)
    #
    #     fig1 = plt.figure(frameon=False)
    #     ax1 = plt.Axes(fig1, [0., 0., 1., 1.])
    #     plt.pcolormesh(t1, f1, np.abs(Zxx1), shading='gouraud', cmap='gray')
    #     plt.axis('off')
    #     plt.ylim([90, 500])
    #     ax1.set_axis_off()
    #     plt.tight_layout()
    #     fig1.savefig('TestingFigure.png', bbox_inches='tight', pad_inches=0)
    #     plt.close()

    fig0 = plt.figure()
    ax0 = plt.Axes(fig0, [0., 0., 1., 1.])
    plt.style.use('dark_background')
    plt.scatter(time, normV, c=abs(normV * normV), s=abs(normV))
    plt.gray()
    plt.axis('off')
    ax0.set_axis_off()
    plt.tight_layout()
    plt.show()
    fig0.savefig('ScattTestingFigure.png', bbox_inches='tight', pad_inches=0)

    f1, t1, Zxx1 = sig.stft(normV, Fs, nperseg=1000)
    fig1 = plt.figure(frameon=False)
    ax1 = plt.Axes(fig1, [0., 0., 1., 1.])
    plt.pcolormesh(t1, f1, np.abs(Zxx1), shading='gouraud', cmap='gray')
    plt.axis('off')
    plt.ylim([90, 500])
    ax1.set_axis_off()
    plt.tight_layout()
    plt.show()
    fig1.savefig('STFTTestingFigure.png', bbox_inches='tight', pad_inches=0)

    # from Image_merge import merge_images
    # name = "TestingFigure"
    # Folder = "TestingDir"
    # merge_images('STFTTestingFigure.png', 'ScattTestingFigure.png', 'ScattTestingFigure.png', 'STFTTestingFigure.png',
    #              name, Folder)
    import cv2


    from PIL import Image
    def ProcessIm(Im1, Im2):
        image1 = Image.open(Im1)
        image1 = image1.rotate(90)

        image2 = Image.open(Im2)
        image1_size = image1.size
        new_image = Image.new('RGB', (2 * image1_size[0], image1_size[1]), (250, 250, 250))
        new_image.paste(image1, (0, 0))
        new_image.paste(image2, (image1_size[0], 0))
        new_image.save("TestingDir/TestingFigure.png")

    ProcessIm('STFTTestingFigure.png', 'ScattTestingFigure.png')
    # processedIm = Preprocess("TestingDir/TestingFigure.png")
    # plt.imshow(processedIm)
    plt.show()
    processedIm = cv2.imread("TestingDir/TestingFigure.png")[..., ::-1]
    plt.imshow(processedIm)
    plt.show()


def PreprocessingMeth2(data, FolderSTFTTraining, FolderSTFTTesting, dataFileName):
    time = data[0:len(data)-4000, 1]
    voltage = data[0:len(data)-4000, 2]
    Fs = 4000

    TrainingDirectory = [f for f in listdir(FolderSTFTTraining)]
    TestDirectory = [f for f in listdir(FolderSTFTTesting)]
    detenV = sig.detrend(voltage)

    filter = sig.butter(2, [95, 1500], 'bandpass', fs=4000, output='sos')
    corrVoltage = sig.sosfilt(filter, detenV)
    corrVoltage = (corrVoltage*5)/1023

    maxV = max(corrVoltage)
    normV = corrVoltage/maxV

    countTrain = int(len(TrainingDirectory))
    countTest = int(len(TestDirectory))

    fig0 = plt.figure()
    ax0 = plt.Axes(fig0, [0., 0., 1., 1.])
    plt.style.use('dark_background')
    plt.scatter(time, normV, c=abs(normV * normV), s=abs(normV))
    plt.gray()
    plt.axis('off')
    ax0.set_axis_off()
    plt.tight_layout()
    plt.show()
    fig0.savefig('ScattTestingFigure.png', bbox_inches='tight', pad_inches=0)

    f1, t1, Zxx1 = sig.stft(normV, Fs, nperseg=1000)
    fig1 = plt.figure(frameon=False)
    ax1 = plt.Axes(fig1, [0., 0., 1., 1.])
    plt.pcolormesh(t1, f1, np.abs(Zxx1), shading='gouraud', cmap='gray')
    plt.axis('off')
    plt.ylim([90, 500])
    ax1.set_axis_off()
    plt.tight_layout()
    plt.show()
    fig1.savefig('STFTTestingFigure.png', bbox_inches='tight', pad_inches=0)

    Training = [1, 3, 4]
    # from Image_merge import merge_images
    # i = randint(1, 4)
    # if i in Training:
    #     nameTrain = str(countTrain)
    #     countTrain += 1
    #     FileName = FolderSTFTTraining + "/" + nameTrain
    #     # fig1.savefig(FileName, bbox_inches='tight', pad_inches=0)
    #     # merge_images('Ch1.png', nameTrain, FolderSTFTTraining)
    #     merge_images('STFTTestingFigure.png', 'ScattTestingFigure.png', 'ScattTestingFigure.png',
    #                  'STFTTestingFigure.png', nameTrain, FolderSTFTTraining)
    # else:
    #     nameTest = str(countTest)
    #     countTest += 1
    #     FileName = FolderSTFTTesting + "/" + nameTest
    #     # fig1.savefig(FileName, bbox_inches='tight', pad_inches=0)
    #     # ('Ch1.png', nameTest, FolderSTFTTesting)
    #     merge_images('STFTTestingFigure.png', 'ScattTestingFigure.png', 'ScattTestingFigure.png',
    #                  'STFTTestingFigure.png', nameTest, FolderSTFTTesting)

    from PIL import Image
    def ProcessIm(Im1, Im2, fileName):
        image1 = Image.open(Im1)
        image1 = image1.rotate(90)

        image2 = Image.open(Im2)
        image1_size = image1.size
        new_image = Image.new('RGB', (2 * image1_size[0], image1_size[1]), (250, 250, 250))
        new_image.paste(image1, (0, 0))
        new_image.paste(image2, (image1_size[0], 0))
        new_image.save(fileName)


    i = randint(1, 4)
    if i in Training:
        nameTrain = str(countTrain)
        countTrain += 1
        FileName = FolderSTFTTraining + "/" + nameTrain + '.png'
        print(FileName)
        ProcessIm('STFTTestingFigure.png', 'ScattTestingFigure.png', FileName)

    else:
        nameTest = str(countTest)
        countTest += 1
        FileName = FolderSTFTTesting + "/" + nameTest + '.png'
        print(FileName)
        ProcessIm('STFTTestingFigure.png', 'ScattTestingFigure.png', FileName)

    os.remove("STFTTestingFigure.png")
    os.remove("ScattTestingFigure.png")